// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/Memory.hdl
/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load=1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid and reads 0. Access to any address
 * in the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the Screen
 * and Keyboard chip specifications given in the lectures and the book.
 */
CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    // Memory segment selection using upper bits of address
	// address[13..14]:
	// 00: RAM (0x0000 ~ 0x3FFF)
	// 01: I/O devices (0x4000 ~ 0x6000)
	DMux(in=load, sel=address[14], a=loadRAM, b=loadIO);

	// 00: RAM (0x0000 ~ 0x3FFF)
	// 01: I/O devices (0x4000 ~ 0x6000)
	DMux(in=loadIO, sel=address[13], a=loadScreen, b=loadKBD);

	// RAM16K chip (0x0000 ~ 0x3FFF), 2^14 == 16K
	// Uses address[0..13] for 16K addressing
	RAM16K(in=in, load=loadRAM, address=address[0..13], out=outRAM);
	
	// Screen chip (0x4000 ~ 0x5FFF), 2^13 == 8K
	// Uses address[0..12] for 8K addressing
	Screen(in=in, load=loadScreen, address=address[0..12], out=outScreen);

	// Keyboard chip (0x6000)
	// Read-only, no load or address needed
	Keyboard(out=outKBD);
	
	// Output multiplexer
	// Selects between RAM, Screen, KBD, or 0 based on address[13..14]
	Mux16(a=outScreen, b=outKBD, sel=address[13], out=outIO);
	Mux16(a=outRAM, b=outIO, sel=address[14], out=out);
}